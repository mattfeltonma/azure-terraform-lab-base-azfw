########## Create resource group and Log Analytics Workspace
##########
##########

## Create resource group the resources in this deployment will be deployed to
##
resource "azurerm_resource_group" "rg_aml_hub" {
  name     = "rgamlhub${var.region_code}${var.random_string}"
  location = var.region
  tags     = var.tags

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

## Create a Log Analytics Workspace that all resources specific to this workload will
## write configured resource logs and metrics to
resource "azurerm_log_analytics_workspace" "log_analytics_workspace_workload" {
  name                = "lawamlhub${var.region_code}${var.random_string}"
  location            = var.region
  resource_group_name = azurerm_resource_group.rg_aml_hub.name

  sku               = "PerGB2018"
  retention_in_days = 30

  tags = var.tags

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

########## Create resources required by Azure Machine Learning Hub
##########
##########

## Create Application Insights instance. This will be shared by the AML Hub and its projects to capture 
## logs and metrics generated by the compute resources
resource "azurerm_application_insights" "appins_aml_hub" {
  name                = "appinsamlhub${var.region_code}${var.random_string}"
  location            = var.region
  resource_group_name = azurerm_resource_group.rg_aml_hub.name
  workspace_id        = azurerm_log_analytics_workspace.log_analytics_workspace_workload.id
  application_type    = "other"
  tags                = var.tags

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

## Create Azure Storage account which will be used as the default storage account for the AML hub and projects.
##
resource "azurerm_storage_account" "storage_account_aml_hub" {
  name                = "stamlhub${var.region_code}${var.random_string}"
  resource_group_name = azurerm_resource_group.rg_aml_hub.name
  location            = var.region
  tags                = var.tags

  account_kind             = "StorageV2"
  account_tier             = "Standard"
  account_replication_type = "LRS"

  # Disable key-based access
  shared_access_key_enabled = false

  # Disable public access for blob containers
  allow_nested_items_to_be_public = false

  network_rules {
    # Block all public access by default
    default_action = "Deny"

    # Create resource access rule to allow workspaces within the subscription network access through the storage service firewall
    private_link_access {
      endpoint_resource_id = "/subscriptions/${data.azurerm_subscription.current.subscription_id}/resourceGroups/${azurerm_resource_group.rg_aml_hub.name}/providers/Microsoft.MachineLearningServices/workspaces/*"
    }
  }

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

## Configure diagnostic settings for blob, file, queue, and table services to send logs to Log Analytics Workspace
##
resource "azurerm_monitor_diagnostic_setting" "diag_storage_aml_hub_blob" {

  depends_on = [
    azurerm_storage_account.storage_account_aml_hub
  ]

  name                       = "diag-base"
  target_resource_id         = "${azurerm_storage_account.storage_account_aml_hub.id}/blobServices/default"
  log_analytics_workspace_id = azurerm_log_analytics_workspace.log_analytics_workspace_workload.id

  enabled_log {
    category = "StorageRead"
  }

  enabled_log {
    category = "StorageWrite"
  }

  enabled_log {
    category = "StorageDelete"
  }
}

resource "azurerm_monitor_diagnostic_setting" "diag_storage_aml_hub_file" {
  depends_on = [
    azurerm_storage_account.storage_account_aml_hub,
    azurerm_monitor_diagnostic_setting.diag_storage_aml_hub_blob
  ]

  name                       = "diag-base"
  target_resource_id         = "${azurerm_storage_account.storage_account_aml_hub.id}/fileServices/default"
  log_analytics_workspace_id = azurerm_log_analytics_workspace.log_analytics_workspace_workload.id

  enabled_log {
    category = "StorageRead"
  }

  enabled_log {
    category = "StorageWrite"
  }

  enabled_log {
    category = "StorageDelete"
  }
}

resource "azurerm_monitor_diagnostic_setting" "diag_storage_aml_hub_queue" {
  depends_on = [
    azurerm_storage_account.storage_account_aml_hub,
    azurerm_monitor_diagnostic_setting.diag_storage_aml_hub_file
  ]

  name                       = "diag-base"
  target_resource_id         = "${azurerm_storage_account.storage_account_aml_hub.id}/queueServices/default"
  log_analytics_workspace_id = azurerm_log_analytics_workspace.log_analytics_workspace_workload.id

  enabled_log {
    category = "StorageRead"
  }

  enabled_log {
    category = "StorageWrite"
  }

  enabled_log {
    category = "StorageDelete"
  }
}

resource "azurerm_monitor_diagnostic_setting" "diag_storage_aml_hub_table" {

  depends_on = [
    azurerm_storage_account.storage_account_aml_hub,
    azurerm_monitor_diagnostic_setting.diag_storage_aml_hub_queue
  ]

  name                       = "diag-base"
  target_resource_id         = "${azurerm_storage_account.storage_account_aml_hub.id}/tableServices/default"
  log_analytics_workspace_id = azurerm_log_analytics_workspace.log_analytics_workspace_workload.id

  enabled_log {
    category = "StorageRead"
  }

  enabled_log {
    category = "StorageWrite"
  }

  enabled_log {
    category = "StorageDelete"
  }
}

## Create Key Vault that will hold secrets for AML Hub and project-level connections
##
resource "azurerm_key_vault" "key_vault_aml_hub" {
  name                = "kvamlhub${var.region_code}${var.random_string}"
  location            = var.region
  resource_group_name = azurerm_resource_group.rg_aml_hub.name
  tenant_id           = data.azurerm_client_config.current.tenant_id
  tags                = var.tags


  sku_name = "standard"
  # Turn off purge protection so that Vault can be immediately purged
  purge_protection_enabled   = false
  soft_delete_retention_days = 7

  # Not required for this implementation
  enabled_for_disk_encryption     = false
  enabled_for_deployment          = false
  enabled_for_template_deployment = false

  network_acls {
    default_action             = "Deny"
    bypass                     = "AzureServices"
    virtual_network_subnet_ids = []
    ip_rules                   = []
  }

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

## Create diagnostic settings for AML Hub Key Vault
##
resource "azurerm_monitor_diagnostic_setting" "diag_key_vault_aml_hub" {
  depends_on = [
    azurerm_key_vault.key_vault_aml_hub
  ]

  name                       = "diag"
  target_resource_id         = azurerm_key_vault.key_vault_aml_hub.id
  log_analytics_workspace_id = azurerm_log_analytics_workspace.log_analytics_workspace_workload.id

  enabled_log {
    category = "AuditEvent"
  }

  enabled_log {
    category = "AzurePolicyEvaluationDetails"
  }
}

## Create an Azure Container Registry instance for use by the AML Hub
##
resource "azurerm_container_registry" "acr_aml_hub" {
  name                = "acramlhub${var.region_code}${var.random_string}"
  resource_group_name = azurerm_resource_group.rg_aml_hub.name
  location            = var.region
  tags                = var.tags

  # Premium SKU required for Private Endpoints
  sku = "Premium"

  # Disable the local admin user of the Container Registry
  admin_enabled = false

  # Disable anonymous pull access
  anonymous_pull_enabled = false

  identity {
    type = "SystemAssigned"
  }

  public_network_access_enabled = false
  network_rule_set {
    default_action = "Deny"
  }
  network_rule_bypass_option = "AzureServices"

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

## Configure diagnostic settings for Container Registry to send logs to Log Analytics Workspace
##
resource "azurerm_monitor_diagnostic_setting" "diag_aml_hub" {
  depends_on = [
    azurerm_container_registry.acr_aml_hub
  ]

  name                       = "diag-base"
  target_resource_id         = azurerm_container_registry.acr_aml_hub.id
  log_analytics_workspace_id = azurerm_log_analytics_workspace.log_analytics_workspace_workload.id

  enabled_log {
    category = "ContainerRegistryRepositoryEvents"
  }
  enabled_log {
    category = "ContainerRegistryLoginEvents"
  }
}

########## Create optional resources to demonstrate capabilities
##########
##########

## Create Azure Storage account which will hold data that will be processed by Azure Machine Learning
##
resource "azurerm_storage_account" "storage_account_data" {
  name                = "stdata${var.region_code}${var.random_string}"
  resource_group_name = azurerm_resource_group.rg_aml_hub.name
  location            = var.region
  tags                = var.tags

  account_kind             = "StorageV2"
  account_tier             = "Standard"
  account_replication_type = "LRS"

  # Disable key-based access
  shared_access_key_enabled = false

  # Disable public access for blob containers
  allow_nested_items_to_be_public = false

  network_rules {
    # Block all public access by default
    default_action = "Deny"

    # Create resource access rule to allow workspaces within the subscription network access through the storage service firewall
    private_link_access {
      endpoint_resource_id = "/subscriptions/${data.azurerm_subscription.current.subscription_id}/resourceGroups/${azurerm_resource_group.rg_aml_hub.name}/providers/Microsoft.MachineLearningServices/workspaces/*"
    }
  }

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

resource "azurerm_monitor_diagnostic_setting" "diag_storage_data_blob" {
  depends_on = [
    azurerm_storage_account.storage_account_data
  ]

  name                       = "diag-base"
  target_resource_id         = "${azurerm_storage_account.storage_account_data.id}/blobServices/default"
  log_analytics_workspace_id = azurerm_log_analytics_workspace.log_analytics_workspace_workload.id

  enabled_log {
    category = "StorageRead"
  }

  enabled_log {
    category = "StorageWrite"
  }

  enabled_log {
    category = "StorageDelete"
  }
}

resource "azurerm_monitor_diagnostic_setting" "diag_storage_data_file" {
  depends_on = [
    azurerm_storage_account.storage_account_data,
    azurerm_monitor_diagnostic_setting.diag_storage_data_blob
  ]

  name                       = "diag-base"
  target_resource_id         = "${azurerm_storage_account.storage_account_data.id}/fileServices/default"
  log_analytics_workspace_id = azurerm_log_analytics_workspace.log_analytics_workspace_workload.id

  enabled_log {
    category = "StorageRead"
  }

  enabled_log {
    category = "StorageWrite"
  }

  enabled_log {
    category = "StorageDelete"
  }
}

resource "azurerm_monitor_diagnostic_setting" "diag_storage_data_queue" {
  depends_on = [
    azurerm_storage_account.storage_account_data,
    azurerm_monitor_diagnostic_setting.diag_storage_data_file
  ]

  name                       = "diag-base"
  target_resource_id         = "${azurerm_storage_account.storage_account_data.id}/queueServices/default"
  log_analytics_workspace_id = azurerm_log_analytics_workspace.log_analytics_workspace_workload.id

  enabled_log {
    category = "StorageRead"
  }

  enabled_log {
    category = "StorageWrite"
  }

  enabled_log {
    category = "StorageDelete"
  }
}

resource "azurerm_monitor_diagnostic_setting" "diag_storage_data_table" {
  depends_on = [
    azurerm_storage_account.storage_account_data,
    azurerm_monitor_diagnostic_setting.diag_storage_data_queue
  ]

  name                       = "diag-base"
  target_resource_id         = "${azurerm_storage_account.storage_account_data.id}/tableServices/default"
  log_analytics_workspace_id = azurerm_log_analytics_workspace.log_analytics_workspace_workload.id

  enabled_log {
    category = "StorageRead"
  }

  enabled_log {
    category = "StorageWrite"
  }

  enabled_log {
    category = "StorageDelete"
  }
}

## Create a blob container in the data storage account
##
resource "azurerm_storage_container" "blob_data" {
  depends_on = [
    azurerm_storage_account.storage_account_data
  ]
  name                  = "data"
  storage_account_id    = azurerm_storage_account.storage_account_data.id
  container_access_type = "private"
}

########## Create the user-assigned managed identity that will be associated with the AML Hub and required role assignments
########## This is only required if the hub_identity variable is set to 'umi'. 
##########

## Create the user-assigned managed identity that will be associated with the AML Hub
##
resource "azurerm_user_assigned_identity" "umi_aml_hub" {
  depends_on = [
    azurerm_resource_group.rg_aml_hub
  ]

  count = var.hub_identity == "umi" ? 1 : 0

  name                = "umiamlhub${var.region_code}${var.random_string}"
  resource_group_name = azurerm_resource_group.rg_aml_hub.name
  location            = var.region
  tags                = var.tags

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

## Pause for 10 seconds to allow the AML Hub identity to be replicated through Entra ID
##
resource "time_sleep" "wait_aml_hub_identity" {
  depends_on = [
    azurerm_user_assigned_identity.umi_aml_hub
  ]

  count = var.hub_identity == "umi" ? 1 : 0

  create_duration = "10s"
}

## Assign the managed identity the Azure AI Administrator role on the resource group
## This resource group should contain the Application Insights, Container Registry, Storage Account (default),
## and Key Vault used by the AML Hub being created
resource "azurerm_role_assignment" "umi_aml_rg_aiadministrator" {
  depends_on = [
    time_sleep.wait_aml_hub_identity,
  ]

  count = var.hub_identity == "user_assigned" ? 1 : 0

  name                 = uuidv5("dns", "${azurerm_resource_group.rg_aml_hub.name}${azurerm_user_assigned_identity.umi_aml_hub[0].name}aiadmin")
  scope                = azurerm_resource_group.rg_aml_hub.id
  role_definition_name = "Azure AI Administrator"
  principal_id         = azurerm_user_assigned_identity.umi_aml_hub[0].principal_id
}

## Create Azure RBAC role assignments on the default storage account for the AML Hub user-assigned managed identity 
## to assign File Data Privileged Contributor role. This enables the AML Hub identity to create
## the necessary file shares required by projects.
resource "azurerm_role_assignment" "umi_aml_st_file_data_contributor" {
  depends_on = [
    azurerm_role_assignment.umi_aml_rg_aiadministrator[0]
  ]

  count = var.hub_identity == "umi" ? 1 : 0

  name                 = uuidv5("dns", "${azurerm_resource_group.rg_aml_hub.name}${azurerm_storage_account.storage_account_aml_hub.name}${azurerm_user_assigned_identity.umi_aml_hub[0].name}filedata")
  scope                = azurerm_storage_account.storage_account_aml_hub.id
  role_definition_name = "Storage File Data Privileged Contributor"
  principal_id         = azurerm_user_assigned_identity.umi_aml_hub[0].principal_id
}

## Create Azure RBAC role assignment on AML key vault for the AML workspace user-assigned managed identity
## to assign the Key Vault Administrator role. This enabled the AML identity to create and managed secrets in the key vault
## for connections
resource "azurerm_role_assignment" "umi_aml_kv_admin" {
  depends_on = [
    azurerm_role_assignment.umi_aml_st_file_data_contributor[0]
  ]

  count = var.hub_identity == "umi" ? 1 : 0

  name                 = uuidv5("dns", "${azurerm_resource_group.rg_aml_hub.name}${azurerm_key_vault.key_vault_aml_hub.name}${azurerm_user_assigned_identity.umi_aml_hub[0].name}kvadmin")
  scope                = azurerm_key_vault.key_vault_aml_hub.id
  role_definition_name = "Key Vault Administrator"
  principal_id         = azurerm_user_assigned_identity.umi_aml_hub[0].principal_id
}

## Create Azure RBAC role assignment on the resource group for the AML workspace user-assigned managed identity
## to assign the Azure AI Enterprise Network Connection Approver role. This is required for the workspace to create
## the managed private endpoints in the managed virtual network
resource "azurerm_role_assignment" "umi_aml_rg_azure_ai_net_conn_app" {
  count = var.hub_identity == "umi" ? 1 : 0

  depends_on = [
    azurerm_role_assignment.umi_aml_kv_admin
  ]

  name                 = uuidv5("dns", "${azurerm_resource_group.rg_aml_hub.name}${azurerm_user_assigned_identity.umi_aml_hub[0].name}netconnapp")
  scope                = azurerm_resource_group.rg_aml_hub.id
  role_definition_name = "Azure AI Enterprise Network Connection Approver"
  principal_id         = azurerm_user_assigned_identity.umi_aml_hub[0].principal_id
}

## Pause for 120 seconds to allow the role assignments to propagate through Azure
##
resource "time_sleep" "wait_umi_hub_role_assignments_main" {
  count = var.hub_identity == "umi" ? 1 : 0

  depends_on = [
    azurerm_role_assignment.umi_aml_rg_aiadministrator,
    azurerm_role_assignment.umi_aml_st_file_data_contributor,
    azurerm_role_assignment.umi_aml_kv_admin,
    azurerm_role_assignment.umi_aml_rg_azure_ai_net_conn_app
  ]
  create_duration = "120s"
}

########## Create the AML Hub and its child resources
##########
##########

## Create the AML Hub Workspace
##
resource "azapi_resource" "aml_hub" {
  depends_on = [
    azurerm_application_insights.appins_aml_hub,
    azurerm_log_analytics_workspace.log_analytics_workspace_workload,
    azurerm_container_registry.acr_aml_hub,
    azurerm_storage_account.storage_account_aml_hub,
    azurerm_key_vault.key_vault_aml_hub,
    azurerm_storage_account.storage_account_data,
    time_sleep.wait_umi_hub_role_assignments_main
  ]

  type                      = "Microsoft.MachineLearningServices/workspaces@2025-09-01"
  name                      = "amlhub${var.region_code}${var.random_string}"
  parent_id                 = azurerm_resource_group.rg_aml_hub.id
  location                  = var.region
  schema_validation_enabled = true

  body = {

    # Set the hub to use a user-assigned managed identity if specified, otherwise use a system-assigned managed identity
    identity = {
      type = "SystemAssigned"
    }
    tags = var.tags

    # Create an AML hub workspace
    kind = "Hub"

    properties = {
      friendlyName = "Sample-AML-Hub"
      description  = "This is a sample AML Hub"

      applicationInsights = azurerm_application_insights.appins_aml_hub.id
      keyVault            = azurerm_key_vault.key_vault_aml_hub.id
      storageAccount      = azurerm_storage_account.storage_account_aml_hub.id
      containerRegistry   = azurerm_container_registry.acr_aml_hub.id

      publicNetworkAccess = "disabled"
      managedNetwork = {
        isolationMode = "AllowOnlyApprovedOutbound"
        firewallSku   = "Standard"
        outboundRules = {
          # Create the managed private endpoint for the Azure Storage Account blob and file endpoints of the data storage account
          managed_pe_data_blob = {
            category = "UserDefined"
            type     = "PrivateEndpoint"
            destination = {
              serviceResourceId = azurerm_storage_account.storage_account_data.id
              subresourceTarget = "blob"
            }
          }
          managed_pe_data_file = {
            category = "UserDefined"
            type     = "PrivateEndpoint"
            destination = {
              serviceResourceId = azurerm_storage_account.storage_account_data.id
              subresourceTarget = "file"
            }
          }

          # Create required fqdn rules to allow compute build in the managed virtual network to download tools and libraries
          AllowPypi = {
            type        = "FQDN"
            destination = "pypi.org"
            category    = "UserDefined"
          }
          AllowPythonHostedWildcard = {
            type        = "FQDN"
            destination = "*.pythonhosted.org"
            category    = "UserDefined"
          }
          AllowAnacondaCom = {
            type        = "FQDN"
            destination = "anaconda.com"
            category    = "UserDefined"
          }
          AllowAnacondaComWildcard = {
            type        = "FQDN"
            destination = "*.anaconda.com"
            category    = "UserDefined"
          }
          AllowAnacondaOrgWildcard = {
            type        = "FQDN"
            destination = "*.anaconda.org"
            category    = "UserDefined"
          }

          # (OPTIONAL) Create fqdn rules to support usage of SSH to compute instances in a managed virtual network from Visual Studio Code
          # Comment these out if you aren't using this feature
          AllowVsCodeDevWildcard = {
            type        = "FQDN"
            destination = "*.vscode.dev"
            category    = "UserDefined"
          }
          AllowVsCodeBlob = {
            type        = "FQDN"
            destination = "vscode.blob.core.windows.net"
            category    = "UserDefined"
          }
          AllowGalleryCdnWildcard = {
            type        = "FQDN"
            destination = "*.gallerycdn.vsassets.io"
            category    = "UserDefined"
          }
          AllowRawGithub = {
            type        = "FQDN"
            destination = "raw.githubusercontent.com"
            category    = "UserDefined"
          }
          AllowVsCodeUnpkWildcard = {
            type        = "FQDN"
            destination = "*.vscode-unpkg.net"
            category    = "UserDefined"
          }
          AllowVsCodeCndWildcard = {
            type        = "FQDN"
            destination = "*.vscode-cdn.net"
            category    = "UserDefined"
          }
          AllowVsCodeExperimentsWildcard = {
            type        = "FQDN"
            destination = "*.vscodeexperiments.azureedge.net"
            category    = "UserDefined"
          }
          AllowDefaultExpTas = {
            type        = "FQDN"
            destination = "default.exp-tas.com"
            category    = "UserDefined"
          }
          AllowCodeVisualStudio = {
            type        = "FQDN"
            destination = "code.visualstudio.com"
            category    = "UserDefined"
          }
          AllowUpdateCodeVisualStudio = {
            type        = "FQDN"
            destination = "update.code.visualstudio.com"
            category    = "UserDefined"
          }
          AllowVsMsecndNet = {
            type        = "FQDN"
            destination = "*.vo.msecnd.net"
            category    = "UserDefined"
          }
          AllowMarketplaceVisualStudio = {
            type        = "FQDN"
            destination = "marketplace.visualstudio.com"
            category    = "UserDefined"
          }
          AllowVsCodeDownload = {
            type        = "FQDN"
            destination = "vscode.download.prss.microsoft.com"
            category    = "UserDefined"
          }
        }
      }

      # Set the authentication for system datastores to use the managed identity of the hub instead of storing the API keys as secrets in Key Vault
      systemDatastoresAuthMode = "identity"

      # Place the workspace in the resource group created at the beginning of this template
      workspaceHubConfig = {
        defaultWorkspaceResourceGroup = azurerm_resource_group.rg_aml_hub.id
      }
    }
  }
  # Ignore updates to these tags on additional Terraform deployments
  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

## Create diagnostic settings to capture resource logs and metrics for AML Hub and place them in the Log Analytics Workspace
##
resource "azurerm_monitor_diagnostic_setting" "aml_hub_diag_base" {
  depends_on = [
    azapi_resource.aml_hub,
    azurerm_log_analytics_workspace.log_analytics_workspace_workload
  ]

  name                       = "diag-base"
  target_resource_id         = azapi_resource.aml_hub.id
  log_analytics_workspace_id = azurerm_log_analytics_workspace.log_analytics_workspace_workload.id

  enabled_log {
    category = "ComputeInstanceEvent"
  }
}

########## Create additional role assignments that for AML Hub user-assigned managed identity that require the AML Hub to exist first
########## These are only required if the hub_identity variable is set to 'umi'.
##########

## Create Storage Blob Data Contributor role assignment on the default storage account for the AML Hub user-assigned managed identity
## This is only required when the hub_identity variable is set to 'umi'. This enables the AML Hub identity to create
## the necessary blob containers required by projects. Blob permissions are dependent on the creation of the hub
## in order to create the ABAC condition on the role assignment
resource "azurerm_role_assignment" "umi_aml_st_blob_data_contributor" {
  depends_on = [
    azapi_resource.aml_hub
  ]

  count = var.hub_identity == "umi" ? 1 : 0

  name                 = uuidv5("dns", "${azurerm_resource_group.rg_aml_hub.name}${azurerm_storage_account.storage_account_aml_hub.name}${azurerm_user_assigned_identity.umi_aml_hub[0].name}blobdatacontributor")
  scope                = azurerm_storage_account.storage_account_aml_hub.id
  role_definition_name = "Storage Blob Data Contributor"
  principal_id         = azurerm_user_assigned_identity.umi_aml_hub[0].principal_id
  condition_version    = "2.0"
  condition            = <<-EOT
  (
    (
      !(ActionMatches{'Microsoft.Storage/storageAccounts/blobServices/containers/blobs/delete'})  
      AND  !(ActionMatches{'Microsoft.Storage/storageAccounts/blobServices/containers/blobs/read'}) 
      AND  !(ActionMatches{'Microsoft.Storage/storageAccounts/blobServices/containers/blobs/write'}) 
      AND  !(ActionMatches{'Microsoft.Storage/storageAccounts/blobServices/containers/blobs/move/action'})
      AND  !(ActionMatches{'Microsoft.Storage/storageAccounts/blobServices/containers/blobs/add/action'})
    ) 
    OR 
    (@Resource[Microsoft.Storage/storageAccounts/blobServices/containers:name] StringStartsWithIgnoreCase '${azapi_resource.aml_hub.output.workspaceId}-') 
  )
  EOT
}

## Pause for 120 seconds to allow the role assignments to propagate through Azure
##
resource "time_sleep" "wait_umi_hub_role_assignments_additional" {
  count = var.hub_identity == "umi" ? 1 : 0

  depends_on = [
    azurerm_role_assignment.umi_aml_st_blob_data_contributor
  ]
  create_duration = "120s"
}

## Create an AML Hub project workspace
##
resource "azapi_resource" "aml_project" {
  depends_on = [
    azapi_resource.aml_hub,
    time_sleep.wait_umi_hub_role_assignments_additional
  ]

  type                      = "Microsoft.MachineLearningServices/workspaces@2025-09-01"
  name                      = "amlws${var.region_code}${var.random_string}"
  parent_id                 = azurerm_resource_group.rg_aml_hub.id
  location                  = var.region
  schema_validation_enabled = false

  body = {
    identity = {
      type = "SystemAssigned"
    }
    tags = var.tags

    # Create an AML project workspace
    kind = "Project"

    # Only SKU right now
    sku = {
      tier = "Basic"
      name = "Basic"
    }

    properties = {
      friendlyName = "Sample-Aml-Project-1"
      description  = "This is sample AML Project 1"

      # Associate the workspace to the AML Hub
      hubResourceId = azapi_resource.aml_hub.id

      # Do not apply any permissions on the resource group
      allowRoleAssignmentOnRg = false

      # Probably unnecessary due to hub configuration but can't hurt
      systemDatastoresAuthMode = "identity"

      # This it the resource group where the AML Hub has been deployed
      workspaceHubConfig = {
        defaultWorkspaceResourceGroup = azurerm_resource_group.rg_aml_hub.id
      }
    }
  }
  # Export system-assigned managed identity principal ID for the project
  response_export_values = [
    "identity.principalId"
  ]

  # Ignore updates to these tags on additional Terraform deployments
  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

## Pause for 10 seconds to allow the project identity to be replicated through Entra ID
##
resource "time_sleep" "wait_project_identities" {
  depends_on = [
    azapi_resource.aml_project
  ]

  count           = var.hub_identity == "smi" ? 1 : 0
  create_duration = "10s"
}

## Create a connection from the project workspace to a storage account that will be used to demonstrate data storage
##
resource "azapi_resource" "project_storage_data_datastore" {
  depends_on = [
    azapi_resource.aml_project,
    azurerm_storage_account.storage_account_data,
    azurerm_storage_container.blob_data
  ]

  type                      = "Microsoft.MachineLearningServices/workspaces/datastores@2025-01-01-preview"
  name                      = substr("conn${azurerm_storage_account.storage_account_data.name}", 0, 24)
  parent_id                 = azapi_resource.aml_project.id
  schema_validation_enabled = true

  body = {
    properties = {
      description   = "Data storage account for AI Foundry Project"
      datastoreType = "AzureBlob"
      accountName   = azurerm_storage_account.storage_account_data.name
      endpoint      = "core.windows.net"
      protocol      = "https"
      containerName = "data"

      # Set the authentication to use the user's Entra ID identity
      credentials = {
        credentialsType = "None"
      }
      serviceDataAccessAuthIdentity = "None"

      tags = var.tags
    }
  }
}

########## Create Private Endpoints for AML Hub and required resources
##########
##########

## Create a Private Endpoint AML Hub instance
##
resource "azurerm_private_endpoint" "pe_aml_hub" {
  depends_on = [
    azapi_resource.aml_hub
  ]

  name                = "pe${azapi_resource.aml_hub.name}workspace"
  location            = var.region
  resource_group_name = azurerm_resource_group.rg_aml_hub.name
  tags                = var.tags
  subnet_id           = var.subnet_id_private_endpoints

  custom_network_interface_name = "nic${azapi_resource.aml_hub.name}workspace"

  private_service_connection {
    name                           = "peconn${azapi_resource.aml_hub.name}workspace"
    private_connection_resource_id = azapi_resource.aml_hub.id
    subresource_names              = ["amlworkspace"]
    is_manual_connection           = false
  }

  private_dns_zone_group {
    name = "zoneconn${azapi_resource.aml_hub.name}workspace"
    private_dns_zone_ids = [
      "/subscriptions/${data.azurerm_subscription.current.subscription_id}/resourceGroups/${var.resource_group_name_dns}/providers/Microsoft.Network/privateDnsZones/privatelink.api.azureml.ms",
      "/subscriptions/${data.azurerm_subscription.current.subscription_id}/resourceGroups/${var.resource_group_name_dns}/providers/Microsoft.Network/privateDnsZones/privatelink.notebooks.azure.net"
    ]
  }

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

## Create the A record for the AML Workspace compute instances only if it doesn't already exist
## Using null_resource with Azure CLI to avoid count dependency issues
##
resource "null_resource" "aml_workspace_compute_instance_dns" {
  depends_on = [
    azurerm_private_endpoint.pe_aml_hub
  ]

  provisioner "local-exec" {
    command = <<-EOT
      # Check if the DNS A record already exists
      if ! az network private-dns record-set a show \
        --resource-group "${var.resource_group_name_dns}" \
        --zone-name "instances.azureml.ms" \
        --name "*.${var.region}" \
        --subscription "${var.sub_id_dns}" >/dev/null 2>&1; then
        
        # Create the DNS A record if it doesn't exist
        az network private-dns record-set a create \
          --resource-group "${var.resource_group_name_dns}" \
          --zone-name "instances.azureml.ms" \
          --name "*.${var.region}" \
          --subscription "${var.sub_id_dns}"
        
        # Add the private endpoint IP to the record set
        az network private-dns record-set a add-record \
          --resource-group "${var.resource_group_name_dns}" \
          --zone-name "instances.azureml.ms" \
          --record-set-name "*.${var.region}" \
          --ipv4-address "${azurerm_private_endpoint.pe_aml_hub.private_service_connection.0.private_ip_address}" \
          --subscription "${var.sub_id_dns}"

        echo "DNS A record created for *.${var.region} in instances.azureml.ms"
      else
        echo "DNS A record for *.${var.region} already exists in instances.azureml.ms"
      fi
    EOT
  }

  # Trigger when the private endpoint IP changes
  triggers = {
    private_endpoint_ip = azurerm_private_endpoint.pe_aml_hub.private_service_connection.0.private_ip_address
    location            = var.region
    resource_group      = var.resource_group_name_dns
    subscription        = var.sub_id_dns
  }
}

## Create a Private Endpoint for AML Hub storage account blob endpoint
##
resource "azurerm_private_endpoint" "pe_storage_account_aml_hub_blob" {
  depends_on = [
    azurerm_storage_account.storage_account_aml_hub,
    null_resource.aml_workspace_compute_instance_dns
  ]

  name                = "pe${azurerm_storage_account.storage_account_aml_hub.name}blob"
  location            = var.region
  resource_group_name = azurerm_resource_group.rg_aml_hub.name
  tags                = var.tags
  subnet_id           = var.subnet_id_private_endpoints

  custom_network_interface_name = "nic${azurerm_storage_account.storage_account_aml_hub.name}blob"

  private_service_connection {
    name                           = "peconn${azurerm_storage_account.storage_account_aml_hub.name}blob"
    private_connection_resource_id = azurerm_storage_account.storage_account_aml_hub.id
    subresource_names              = ["blob"]
    is_manual_connection           = false
  }

  private_dns_zone_group {
    name = "zoneconn${azurerm_storage_account.storage_account_aml_hub.name}blob"
    private_dns_zone_ids = [
      "/subscriptions/${data.azurerm_subscription.current.subscription_id}/resourceGroups/${var.resource_group_name_dns}/providers/Microsoft.Network/privateDnsZones/privatelink.blob.core.windows.net"
    ]
  }

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

## Create a Private Endpoint for AML Hub storage account file endpoint
##
resource "azurerm_private_endpoint" "pe_storage_account_aml_hub_file" {
  depends_on = [
    azurerm_storage_account.storage_account_aml_hub,
    azurerm_private_endpoint.pe_storage_account_aml_hub_blob
  ]

  name                = "pe${azurerm_storage_account.storage_account_aml_hub.name}file"
  location            = var.region
  resource_group_name = azurerm_resource_group.rg_aml_hub.name
  tags                = var.tags
  subnet_id           = var.subnet_id_private_endpoints

  custom_network_interface_name = "nic${azurerm_storage_account.storage_account_aml_hub.name}file"

  private_service_connection {
    name                           = "peconn${azurerm_storage_account.storage_account_aml_hub.name}file"
    private_connection_resource_id = azurerm_storage_account.storage_account_aml_hub.id
    subresource_names              = ["file"]
    is_manual_connection           = false
  }

  private_dns_zone_group {
    name = "zoneconn${azurerm_storage_account.storage_account_aml_hub.name}file"
    private_dns_zone_ids = [
      "/subscriptions/${data.azurerm_subscription.current.subscription_id}/resourceGroups/${var.resource_group_name_dns}/providers/Microsoft.Network/privateDnsZones/privatelink.file.core.windows.net"
    ]
  }

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

## Create a Private Endpoint for AML Hub Key Vault
##
resource "azurerm_private_endpoint" "pe_key_vault_aml_hub" {
  depends_on = [
    azurerm_key_vault.key_vault_aml_hub,
    azurerm_private_endpoint.pe_storage_account_aml_hub_file
  ]

  name                = "pe${azurerm_key_vault.key_vault_aml_hub.name}vault"
  location            = var.region
  resource_group_name = azurerm_resource_group.rg_aml_hub.name
  tags                = var.tags
  subnet_id           = var.subnet_id_private_endpoints

  custom_network_interface_name = "nic${azurerm_key_vault.key_vault_aml_hub.name}vault"

  private_service_connection {
    name                           = "peconn${azurerm_key_vault.key_vault_aml_hub.name}vault"
    private_connection_resource_id = azurerm_key_vault.key_vault_aml_hub.id
    subresource_names              = ["vault"]
    is_manual_connection           = false
  }

  private_dns_zone_group {
    name = "zoneconn${azurerm_key_vault.key_vault_aml_hub.name}vault"
    private_dns_zone_ids = [
      "/subscriptions/${data.azurerm_subscription.current.subscription_id}/resourceGroups/${var.resource_group_name_dns}/providers/Microsoft.Network/privateDnsZones/privatelink.vaultcore.azure.net"
    ]
  }

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

## Create a Private Endpoint for AML Hub Container Registry
##
resource "azurerm_private_endpoint" "pe_container_registry_aml_hub" {
  depends_on = [
    azurerm_container_registry.acr_aml_hub,
    azurerm_private_endpoint.pe_key_vault_aml_hub
  ]

  name                = "pe${azurerm_container_registry.acr_aml_hub.name}registry"
  location            = var.region
  resource_group_name = azurerm_resource_group.rg_aml_hub.name
  tags                = var.tags
  subnet_id           = var.subnet_id_private_endpoints

  custom_network_interface_name = "nic${azurerm_container_registry.acr_aml_hub.name}registry"

  private_service_connection {
    name                           = "peconn${azurerm_container_registry.acr_aml_hub.name}registry"
    private_connection_resource_id = azurerm_container_registry.acr_aml_hub.id
    subresource_names              = ["registry"]
    is_manual_connection           = false
  }

  private_dns_zone_group {
    name = "zoneconn${azurerm_container_registry.acr_aml_hub.name}registry"
    private_dns_zone_ids = [
      "/subscriptions/${data.azurerm_subscription.current.subscription_id}/resourceGroups/${var.resource_group_name_dns}/providers/Microsoft.Network/privateDnsZones/privatelink.azurecr.io"
    ]
  }

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

########## Create Private Endpoints for optional resources
##########
##########

## Create a Private Endpoint for data storage account blob endpoint
##
resource "azurerm_private_endpoint" "pe_storage_account_data_blob" {
  depends_on = [
    azurerm_storage_account.storage_account_data,
    azurerm_private_endpoint.pe_container_registry_aml_hub
  ]

  name                = "pe${azurerm_storage_account.storage_account_data.name}blob"
  location            = var.region
  resource_group_name = azurerm_resource_group.rg_aml_hub.name
  tags                = var.tags
  subnet_id           = var.subnet_id_private_endpoints

  custom_network_interface_name = "nic${azurerm_storage_account.storage_account_data.name}blob"

  private_service_connection {
    name                           = "peconn${azurerm_storage_account.storage_account_data.name}blob"
    private_connection_resource_id = azurerm_storage_account.storage_account_data.id
    subresource_names              = ["blob"]
    is_manual_connection           = false
  }

  private_dns_zone_group {
    name = "zoneconn${azurerm_storage_account.storage_account_data.name}blob"
    private_dns_zone_ids = [
      "/subscriptions/${data.azurerm_subscription.current.subscription_id}/resourceGroups/${var.resource_group_name_dns}/providers/Microsoft.Network/privateDnsZones/privatelink.blob.core.windows.net"
    ]
  }

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

## Create a Private Endpoint for data storage account file endpoint
##
resource "azurerm_private_endpoint" "pe_storage_account_data_file" {
  depends_on = [
    azurerm_storage_account.storage_account_data,
    azurerm_private_endpoint.pe_storage_account_data_blob
  ]

  name                = "pe${azurerm_storage_account.storage_account_data.name}file"
  location            = var.region
  resource_group_name = azurerm_resource_group.rg_aml_hub.name
  tags                = var.tags
  subnet_id           = var.subnet_id_private_endpoints

  custom_network_interface_name = "nic${azurerm_storage_account.storage_account_data.name}file"

  private_service_connection {
    name                           = "peconn${azurerm_storage_account.storage_account_data.name}file"
    private_connection_resource_id = azurerm_storage_account.storage_account_data.id
    subresource_names              = ["file"]
    is_manual_connection           = false
  }

  private_dns_zone_group {
    name = "zoneconn${azurerm_storage_account.storage_account_data.name}file"
    private_dns_zone_ids = [
      "/subscriptions/${data.azurerm_subscription.current.subscription_id}/resourceGroups/${var.resource_group_name_dns}/providers/Microsoft.Network/privateDnsZones/privatelink.file.core.windows.net"
    ]
  }

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

## Create a Private Endpoint for data storage account table endpoint
##
resource "azurerm_private_endpoint" "pe_storage_account_data_table" {
  depends_on = [
    azurerm_storage_account.storage_account_data,
    azurerm_private_endpoint.pe_storage_account_data_file
  ]

  name                = "pe${azurerm_storage_account.storage_account_data.name}table"
  location            = var.region
  resource_group_name = azurerm_resource_group.rg_aml_hub.name
  tags                = var.tags
  subnet_id           = var.subnet_id_private_endpoints

  custom_network_interface_name = "nic${azurerm_storage_account.storage_account_data.name}table"

  private_service_connection {
    name                           = "peconn${azurerm_storage_account.storage_account_data.name}table"
    private_connection_resource_id = azurerm_storage_account.storage_account_data.id
    subresource_names              = ["table"]
    is_manual_connection           = false
  }

  private_dns_zone_group {
    name = "zoneconn${azurerm_storage_account.storage_account_data.name}table"
    private_dns_zone_ids = [
      "/subscriptions/${data.azurerm_subscription.current.subscription_id}/resourceGroups/${var.resource_group_name_dns}/providers/Microsoft.Network/privateDnsZones/privatelink.table.core.windows.net"
    ]
  }

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

## Create a Private Endpoint for data storage account dfs endpoint
##
resource "azurerm_private_endpoint" "pe_storage_account_data_dfs" {
  depends_on = [
    azurerm_storage_account.storage_account_data,
    azurerm_private_endpoint.pe_storage_account_data_table
  ]

  name                = "pe${azurerm_storage_account.storage_account_data.name}dfs"
  location            = var.region
  resource_group_name = azurerm_resource_group.rg_aml_hub.name
  tags                = var.tags
  subnet_id           = var.subnet_id_private_endpoints

  custom_network_interface_name = "nic${azurerm_storage_account.storage_account_data.name}dfs"

  private_service_connection {
    name                           = "peconn${azurerm_storage_account.storage_account_data.name}dfs"
    private_connection_resource_id = azurerm_storage_account.storage_account_data.id
    subresource_names              = ["dfs"]
    is_manual_connection           = false
  }

  private_dns_zone_group {
    name = "zoneconn${azurerm_storage_account.storage_account_data.name}dfs"
    private_dns_zone_ids = [
      "/subscriptions/${data.azurerm_subscription.current.subscription_id}/resourceGroups/${var.resource_group_name_dns}/providers/Microsoft.Network/privateDnsZones/privatelink.dfs.core.windows.net"
    ]
  }

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

########## Create an Azure Machine Learnning Compute Instance to perform container builds
########## This is required because the Azure Container Registry has public access disabled
##########

## Create a user-assigned managed identity for the compute instance
##
resource "azurerm_user_assigned_identity" "umi_compute_instance" {
  depends_on = [
    azurerm_resource_group.rg_aml_hub,
    azapi_resource.aml_project
  ]
  name                = "umi${local.build_compute_instance_name}"
  location            = var.region
  resource_group_name = azurerm_resource_group.rg_aml_hub.name
  tags                = var.tags

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

## Pause for 10 seconds to allow the compute instance managed identity to be replicated through Entra ID
##
resource "time_sleep" "wait_aml_compute_instance_identity" {
  depends_on = [
    azurerm_user_assigned_identity.umi_compute_instance
  ]
  create_duration = "10s"
}

## Create Azure RBAC Role Assignment granting the Storage Blob Data Contributor role on the
## AML Hub storage account to the compute instance user-assigned managed identity
resource "azurerm_role_assignment" "umi_compute_instance_st_blob_data_contributor" {
  depends_on = [
    time_sleep.wait_aml_compute_instance_identity
  ]

  name                 = uuidv5("dns", "${azurerm_storage_account.storage_account_aml_hub.name}${azurerm_user_assigned_identity.umi_compute_instance.principal_id}storageblobdatacontributor")
  scope                = azurerm_storage_account.storage_account_aml_hub.id
  role_definition_name = "Storage Blob Data Contributor"
  principal_id         = azurerm_user_assigned_identity.umi_compute_instance.principal_id
}

## Create Azure RBAC Role Assignment granting the Storage File Data Privileged Contributor role on the
## AML Hub storage account to the compute instance user-assigned managed identity
resource "azurerm_role_assignment" "umi_compute_instance_st_file_data_privileged_contributor" {
  depends_on = [
    time_sleep.wait_aml_compute_instance_identity
  ]

  name                 = uuidv5("dns", "${azurerm_storage_account.storage_account_aml_hub.name}${azurerm_user_assigned_identity.umi_compute_instance.principal_id}storagefiledataprivilegedcontributor")
  scope                = azurerm_storage_account.storage_account_aml_hub.id
  role_definition_name = "Storage File Data Privileged Contributor"
  principal_id         = azurerm_user_assigned_identity.umi_compute_instance.principal_id
}

## Create Azure RBAC Role Assignment granting the AcrPush role on the Azure Container Registry 
## to the compute instance user-assigned managed identity
resource "azurerm_role_assignment" "umi_compute_instance_acr_push" {
  depends_on = [
    time_sleep.wait_aml_compute_instance_identity
  ]

  name                 = uuidv5("dns", "${azurerm_container_registry.acr_aml_hub.name}${azurerm_user_assigned_identity.umi_compute_instance.principal_id}acrpush")
  scope                = azurerm_container_registry.acr_aml_hub.id
  role_definition_name = "AcrPush"
  principal_id         = azurerm_user_assigned_identity.umi_compute_instance.principal_id
}

## Create Azure RBAC Role Assignment granting the AcrPull role on the Azure Container Registry
## to the compute instance user-assigned managed identity
resource "azurerm_role_assignment" "umi_compute_instance_acr_pull" {
  depends_on = [
    time_sleep.wait_aml_compute_instance_identity
  ]

  name                 = uuidv5("dns", "${azurerm_container_registry.acr_aml_hub.name}${azurerm_user_assigned_identity.umi_compute_instance.principal_id}acrpull")
  scope                = azurerm_container_registry.acr_aml_hub.id
  role_definition_name = "AcrPull"
  principal_id         = azurerm_user_assigned_identity.umi_compute_instance.principal_id
}

## Pause for 120 seconds to allow the role assignments to propagate through Azure
##
resource "time_sleep" "wait_aml_compute_instance_role_assignments" {
  depends_on = [
    azurerm_role_assignment.umi_compute_instance_st_blob_data_contributor,
    azurerm_role_assignment.umi_compute_instance_st_file_data_privileged_contributor,
    azurerm_role_assignment.umi_compute_instance_acr_push,
    azurerm_role_assignment.umi_compute_instance_acr_pull
  ]
  create_duration = "120s"
}

## Create the AML Compute Instance for the AML Project workspace
##
resource "azurerm_machine_learning_compute_instance" "aml_compute_instance_build" {
  depends_on = [
    azapi_resource.aml_project,
    azurerm_user_assigned_identity.umi_compute_instance,
    time_sleep.wait_aml_compute_instance_role_assignments
  ]

  name = local.build_compute_instance_name
  tags = var.tags

  # Place the compute instance in the AML project workspace
  machine_learning_workspace_id = azapi_resource.aml_project.id

  # Configure the VM SKU size to use
  virtual_machine_size = "Standard_D2s_v3"

  # Disable local authentication to the compute instance since it will be used as build only
  local_auth_enabled = false

  # Disable public IP on the compute instance
  node_public_ip_enabled = false

  # Assign to the machine learning engineer
  assign_to_user {
    object_id = var.user_object_id
    tenant_id = data.azurerm_client_config.current.tenant_id
  }

  # Configure the compute instance to use a user-assigned managed identity
  identity {
    type = "UserAssigned"
    identity_ids = [
      azurerm_user_assigned_identity.umi_compute_instance.id
    ]
  }
}

## Patch the AML Project workspace to use the compute instance as the build compute
##
#resource "azapi_resource" "aml_project_patch" {
#  depends_on = [
#    azurerm_machine_learning_compute_instance.aml_compute_instance_build
#  ]
#
#  type                      = "Microsoft.MachineLearningServices/workspaces@2025-09-01"
# name                      = azapi_resource.aml_project.name
#  parent_id                 = azapi_resource.aml_project.parent_id
#  schema_validation_enabled = false

#  body = {
#    properties = {
#      # Set the build compute to the compute instance
#      imageBuildCompute = azurerm_machine_learning_compute_instance.aml_compute_instance_build.name
#    }
#  }

  # Do not run again if the build compute changes
#  lifecycle {
#    ignore_changes = [
#      body["properties"]["imageBuildCompute"]
#    ]
#  }
#}

## Patch the Azure Machine Learning Hub workspace
##
resource "azapi_update_resource" "aml_hub_patch" {
  depends_on = [
    azurerm_machine_learning_compute_instance.aml_compute_instance_build
  ]

  type      = "Microsoft.MachineLearningServices/workspaces@2025-09-01"
  resource_id = azapi_resource.aml_hub.id
  body = {
    properties = {
      # Set the build compute to the compute instance
      imageBuildCompute = azurerm_machine_learning_compute_instance.aml_compute_instance_build.name
    }
  }

  # Do not run again if the build compute changes
  lifecycle {
    ignore_changes = [
      body["properties"]["imageBuildCompute"]
    ]
  }
}

########## Create the non-human role assignments
##########
##########

## Create Azure RBAC Role Assignment granting the Azure AI Enterprise Network Connection Approver role to the AML Hub managed identity
## This is only required when the hub_identity variable is set to 'smi'. This is required for the workspace to create
## the managed private endpoints in the managed virtual network
resource "azurerm_role_assignment" "hub_perm_azure_ai_enterprise_network_connection_approver" {
  depends_on = [
    azapi_resource.aml_hub,
    azurerm_resource_group.rg_aml_hub
  ]

  count = var.hub_identity == "smi" ? 1 : 0

  name                 = uuidv5("dns", "${azurerm_resource_group.rg_aml_hub.name}${azapi_resource.aml_hub.output.identity.principalId}${azapi_resource.aml_project.name}networkconnectionapprover")
  scope                = azurerm_resource_group.rg_aml_hub.id
  role_definition_name = "Azure AI Enterprise Network Connection Approver"
  principal_id         = azapi_resource.aml_hub.output.identity.principalId
}

########## Create the human role assignments
##########
##########

## Create Azure RBAC Role Assignment granting the Azure Machine Learning Compute Operator role to the user.
## This allows the user to perform all actions on compute resources within the workspace.
##
resource "azurerm_role_assignment" "wk_perm_compute_operator" {
  depends_on = [
    azapi_resource.aml_project
  ]
  name                 = uuidv5("dns", "${azurerm_resource_group.rg_aml_hub.name}${var.user_object_id}${azapi_resource.aml_project.name}computeoperator")
  scope                = azapi_resource.aml_project.id
  role_definition_name = "AzureML Compute Operator"
  principal_id         = var.user_object_id
}

## Create Azure RBAC Role Assignment granting the Azure Machine Learning Data Scientist role to the user.
## This allows the user to perform all actions except for creating compute resources.
##
resource "azurerm_role_assignment" "wk_perm_data_scientist" {
  depends_on = [
    azapi_resource.aml_project
  ]
  name                 = uuidv5("dns", "${azurerm_resource_group.rg_aml_hub.name}${var.user_object_id}${azapi_resource.aml_project.name}datascientist")
  scope                = azapi_resource.aml_project.id
  role_definition_name = "AzureML Data Scientist"
  principal_id         = var.user_object_id
}
