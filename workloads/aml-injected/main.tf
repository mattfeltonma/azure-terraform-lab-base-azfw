########## Create resource group and Log Analytics Workspace
##########
##########

## Create resource group the resources in this deployment will be deployed to
##
resource "azurerm_resource_group" "rg_aml_workspace" {
  name     = "rgamlinj${var.region_code}${var.random_string}"
  location = var.region
  tags     = var.tags

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

## Create a Log Analytics Workspace that all resources specific to this workload will
## write configured resource logs and metrics to
resource "azurerm_log_analytics_workspace" "log_analytics_workspace_workload" {
  name                = "lawamlinj${var.region_code}${var.random_string}"
  location            = var.region
  resource_group_name = azurerm_resource_group.rg_aml_workspace.name

  sku               = "PerGB2018"
  retention_in_days = 30

  tags = var.tags

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

########## Create resources required by Azure Machine Learning Hub
##########
##########

## Create Application Insights instance. This will be shared by the AML Workspace to capture 
## logs and metrics generated by the compute resources
resource "azurerm_application_insights" "appins_aml_workspace" {
  name                = "appinsamlws${var.region_code}${var.random_string}"
  location            = var.region
  resource_group_name = azurerm_resource_group.rg_aml_workspace.name
  workspace_id        = azurerm_log_analytics_workspace.log_analytics_workspace_workload.id
  application_type    = "other"
  tags                = var.tags

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

## Create Azure Storage account which will be used as the default storage account for the AML hub and projects.
##
resource "azurerm_storage_account" "storage_account_aml_workspace" {
  name                = "stamlws${var.region_code}${var.random_string}"
  resource_group_name = azurerm_resource_group.rg_aml_workspace.name
  location            = var.region
  tags                = var.tags

  account_kind             = "StorageV2"
  account_tier             = "Standard"
  account_replication_type = "LRS"

  # Disable key-based access
  shared_access_key_enabled = false

  # Disable public access for blob containers
  allow_nested_items_to_be_public = false

  network_rules {
    # Block all public access by default
    default_action = "Deny"

    # Create resource access rule to allow workspaces within the subscription network access through the storage service firewall
    private_link_access {
      endpoint_resource_id = "/subscriptions/${data.azurerm_subscription.current.subscription_id}/resourceGroups/${azurerm_resource_group.rg_aml_workspace.name}/providers/Microsoft.MachineLearningServices/workspaces/*"
    }
  }

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

## Configure diagnostic settings for blob, file, queue, and table services to send logs to Log Analytics Workspace
##
resource "azurerm_monitor_diagnostic_setting" "diag_storage_aml_workspace_blob" {

  depends_on = [
    azurerm_storage_account.storage_account_aml_workspace
  ]

  name                       = "diag-base"
  target_resource_id         = "${azurerm_storage_account.storage_account_aml_workspace.id}/blobServices/default"
  log_analytics_workspace_id = azurerm_log_analytics_workspace.log_analytics_workspace_workload.id

  enabled_log {
    category = "StorageRead"
  }

  enabled_log {
    category = "StorageWrite"
  }

  enabled_log {
    category = "StorageDelete"
  }
}

resource "azurerm_monitor_diagnostic_setting" "diag_storage_aml_workspace_file" {
  depends_on = [
    azurerm_storage_account.storage_account_aml_workspace,
    azurerm_monitor_diagnostic_setting.diag_storage_aml_workspace_blob
  ]

  name                       = "diag-base"
  target_resource_id         = "${azurerm_storage_account.storage_account_aml_workspace.id}/fileServices/default"
  log_analytics_workspace_id = azurerm_log_analytics_workspace.log_analytics_workspace_workload.id

  enabled_log {
    category = "StorageRead"
  }

  enabled_log {
    category = "StorageWrite"
  }

  enabled_log {
    category = "StorageDelete"
  }
}

resource "azurerm_monitor_diagnostic_setting" "diag_storage_aml_workspace_queue" {
  depends_on = [
    azurerm_storage_account.storage_account_aml_workspace,
    azurerm_monitor_diagnostic_setting.diag_storage_aml_workspace_file
  ]

  name                       = "diag-base"
  target_resource_id         = "${azurerm_storage_account.storage_account_aml_workspace.id}/queueServices/default"
  log_analytics_workspace_id = azurerm_log_analytics_workspace.log_analytics_workspace_workload.id

  enabled_log {
    category = "StorageRead"
  }

  enabled_log {
    category = "StorageWrite"
  }

  enabled_log {
    category = "StorageDelete"
  }
}

resource "azurerm_monitor_diagnostic_setting" "diag_storage_aml_workspace_table" {

  depends_on = [
    azurerm_storage_account.storage_account_aml_workspace,
    azurerm_monitor_diagnostic_setting.diag_storage_aml_workspace_queue
  ]

  name                       = "diag-base"
  target_resource_id         = "${azurerm_storage_account.storage_account_aml_workspace.id}/tableServices/default"
  log_analytics_workspace_id = azurerm_log_analytics_workspace.log_analytics_workspace_workload.id

  enabled_log {
    category = "StorageRead"
  }

  enabled_log {
    category = "StorageWrite"
  }

  enabled_log {
    category = "StorageDelete"
  }
}

## Create Key Vault that will hold secrets for AML Workspace
##
resource "azurerm_key_vault" "key_vault_aml_workspace" {
  name                = "kvamlws${var.region_code}${var.random_string}"
  location            = var.region
  resource_group_name = azurerm_resource_group.rg_aml_workspace.name
  tenant_id           = data.azurerm_client_config.current.tenant_id
  tags                = var.tags


  sku_name = "standard"
  # Turn off purge protection so that Vault can be immediately purged
  purge_protection_enabled   = false
  soft_delete_retention_days = 7

  # Not required for this implementation
  enabled_for_disk_encryption     = false
  enabled_for_deployment          = false
  enabled_for_template_deployment = false

  network_acls {
    default_action             = "Deny"
    bypass                     = "AzureServices"
    virtual_network_subnet_ids = []
    ip_rules = [
      var.trusted_ip
    ]
  }

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

## Create diagnostic settings for AML Workspace Key Vault
##
resource "azurerm_monitor_diagnostic_setting" "diag_key_vault_aml_workspace" {
  depends_on = [
    azurerm_key_vault.key_vault_aml_workspace
  ]

  name                       = "diag"
  target_resource_id         = azurerm_key_vault.key_vault_aml_workspace.id
  log_analytics_workspace_id = azurerm_log_analytics_workspace.log_analytics_workspace_workload.id

  enabled_log {
    category = "AuditEvent"
  }

  enabled_log {
    category = "AzurePolicyEvaluationDetails"
  }
}

## Create an Azure Container Registry instance for use by the AML Workspace
##
resource "azurerm_container_registry" "acr_aml_workspace" {
  name                = "acramlws${var.region_code}${var.random_string}"
  resource_group_name = azurerm_resource_group.rg_aml_workspace.name
  location            = var.region
  tags                = var.tags

  # Premium SKU required for Private Endpoints
  sku = "Premium"

  # Disable the local admin user of the Container Registry
  admin_enabled = false

  # Disable anonymous pull access
  anonymous_pull_enabled = false

  identity {
    type = "SystemAssigned"
  }

  public_network_access_enabled = false
  network_rule_set {
    default_action = "Deny"
  }
  network_rule_bypass_option = "AzureServices"

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

## Configure diagnostic settings for Container Registry to send logs to Log Analytics Workspace
##
resource "azurerm_monitor_diagnostic_setting" "diag_acr_aml_workspace" {
  depends_on = [
    azurerm_container_registry.acr_aml_workspace
  ]

  name                       = "diag-base"
  target_resource_id         = azurerm_container_registry.acr_aml_workspace.id
  log_analytics_workspace_id = azurerm_log_analytics_workspace.log_analytics_workspace_workload.id

  enabled_log {
    category = "ContainerRegistryRepositoryEvents"
  }
  enabled_log {
    category = "ContainerRegistryLoginEvents"
  }
}

########## Create optional storage account that can be used to store external workspace data
########## This is not required
##########

## Create Azure Storage account which will hold data that will be processed by Azure Machine Learning
##
resource "azurerm_storage_account" "storage_account_data" {
  name                = "stdataws${var.region_code}${var.random_string}"
  resource_group_name = azurerm_resource_group.rg_aml_workspace.name
  location            = var.region
  tags                = var.tags

  account_kind             = "StorageV2"
  account_tier             = "Standard"
  account_replication_type = "LRS"

  # Disable key-based access
  shared_access_key_enabled = false

  # Disable public access for blob containers
  allow_nested_items_to_be_public = false

  network_rules {
    # Block all public access by default
    default_action = "Deny"

    # Create resource access rule to allow workspaces within the subscription network access through the storage service firewall
    private_link_access {
      endpoint_resource_id = "/subscriptions/${data.azurerm_subscription.current.subscription_id}/resourceGroups/${azurerm_resource_group.rg_aml_workspace.name}/providers/Microsoft.MachineLearningServices/workspaces/*"
    }
  }

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

resource "azurerm_monitor_diagnostic_setting" "diag_storage_data_blob" {
  depends_on = [
    azurerm_storage_account.storage_account_data
  ]

  name                       = "diag-base"
  target_resource_id         = "${azurerm_storage_account.storage_account_data.id}/blobServices/default"
  log_analytics_workspace_id = azurerm_log_analytics_workspace.log_analytics_workspace_workload.id

  enabled_log {
    category = "StorageRead"
  }

  enabled_log {
    category = "StorageWrite"
  }

  enabled_log {
    category = "StorageDelete"
  }
}

resource "azurerm_monitor_diagnostic_setting" "diag_storage_data_file" {
  depends_on = [
    azurerm_storage_account.storage_account_data,
    azurerm_monitor_diagnostic_setting.diag_storage_data_blob
  ]

  name                       = "diag-base"
  target_resource_id         = "${azurerm_storage_account.storage_account_data.id}/fileServices/default"
  log_analytics_workspace_id = azurerm_log_analytics_workspace.log_analytics_workspace_workload.id

  enabled_log {
    category = "StorageRead"
  }

  enabled_log {
    category = "StorageWrite"
  }

  enabled_log {
    category = "StorageDelete"
  }
}

resource "azurerm_monitor_diagnostic_setting" "diag_storage_data_queue" {
  depends_on = [
    azurerm_storage_account.storage_account_data,
    azurerm_monitor_diagnostic_setting.diag_storage_data_file
  ]

  name                       = "diag-base"
  target_resource_id         = "${azurerm_storage_account.storage_account_data.id}/queueServices/default"
  log_analytics_workspace_id = azurerm_log_analytics_workspace.log_analytics_workspace_workload.id

  enabled_log {
    category = "StorageRead"
  }

  enabled_log {
    category = "StorageWrite"
  }

  enabled_log {
    category = "StorageDelete"
  }
}

resource "azurerm_monitor_diagnostic_setting" "diag_storage_data_table" {
  depends_on = [
    azurerm_storage_account.storage_account_data,
    azurerm_monitor_diagnostic_setting.diag_storage_data_queue
  ]

  name                       = "diag-base"
  target_resource_id         = "${azurerm_storage_account.storage_account_data.id}/tableServices/default"
  log_analytics_workspace_id = azurerm_log_analytics_workspace.log_analytics_workspace_workload.id

  enabled_log {
    category = "StorageRead"
  }

  enabled_log {
    category = "StorageWrite"
  }

  enabled_log {
    category = "StorageDelete"
  }
}

## Create a blob container in the data storage account
##
resource "azurerm_storage_container" "blob_data" {
  depends_on = [
    azurerm_storage_account.storage_account_data
  ]
  name                  = "data"
  storage_account_id    = azurerm_storage_account.storage_account_data.id
  container_access_type = "private"
}

########## Create the user-assigned managed identity that will be associated with the AML Workspace and required role assignments
########## This is only required if the workspace_identity variable is set to 'umi'. 
##########

## Create the user-assigned managed identity that will be associated with the AML Workspace
##
resource "azurerm_user_assigned_identity" "umi_aml_workspace" {
  depends_on = [
    azurerm_resource_group.rg_aml_workspace
  ]

  count = var.workspace_identity == "umi" ? 1 : 0

  name                = "umiamlws${var.region_code}${var.random_string}"
  resource_group_name = azurerm_resource_group.rg_aml_workspace.name
  location            = var.region
  tags                = var.tags

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

## Pause for 10 seconds to allow the AML Hub identity to be replicated through Entra ID
##
resource "time_sleep" "wait_aml_workspace_identity" {
  depends_on = [
    azurerm_user_assigned_identity.umi_aml_workspace
  ]

  count = var.workspace_identity == "umi" ? 1 : 0

  create_duration = "10s"
}

## Assign the managed identity the Azure AI Administrator role on the resource group
## This resource group should contain the Application Insights, Container Registry, Storage Account (default),
## and Key Vault used by the AML Workspace being created
resource "azurerm_role_assignment" "umi_aml_rg_aiadministrator" {
  depends_on = [
    time_sleep.wait_aml_workspace_identity,
  ]

  count = var.workspace_identity == "umi" ? 1 : 0

  name                 = uuidv5("dns", "${azurerm_resource_group.rg_aml_workspace.name}${azurerm_user_assigned_identity.umi_aml_workspace[0].name}aiadmin")
  scope                = azurerm_resource_group.rg_aml_workspace.id
  role_definition_name = "Azure AI Administrator"
  principal_id         = azurerm_user_assigned_identity.umi_aml_workspace[0].principal_id
}

## Create Azure RBAC role assignment on AML key vault for the AML workspace user-assigned managed identity
## to assign the Key Vault Administrator role. This enabled the AML identity to create and managed secrets in the key vault
## for connections
resource "azurerm_role_assignment" "umi_aml_kv_admin" {
  depends_on = [
    azurerm_role_assignment.umi_aml_rg_aiadministrator
  ]

  count = var.workspace_identity == "umi" ? 1 : 0

  name                 = uuidv5("dns", "${azurerm_resource_group.rg_aml_workspace.name}${azurerm_key_vault.key_vault_aml_workspace.name}${azurerm_user_assigned_identity.umi_aml_workspace[0].name}kvadmin")
  scope                = azurerm_key_vault.key_vault_aml_workspace.id
  role_definition_name = "Key Vault Administrator"
  principal_id         = azurerm_user_assigned_identity.umi_aml_workspace[0].principal_id
}

## Create Azure RBAC role assignment on AML storage account for the AML workspace user-assigned managed identity
## to assign the Storage Blob Data Contributor. This enables the AML identity to read and write blob data to the storage account
resource "azurerm_role_assignment" "umi_aml_st_blob_data_contributor" {
  depends_on = [
    azurerm_role_assignment.umi_aml_kv_admin
  ]

  count = var.workspace_identity == "umi" ? 1 : 0

  name                 = uuidv5("dns", "${azurerm_resource_group.rg_aml_workspace.name}${azurerm_storage_account.storage_account_aml_workspace.name}${azurerm_user_assigned_identity.umi_aml_workspace[0].name}blobdatacontributor")
  scope                = azurerm_storage_account.storage_account_aml_workspace.id
  role_definition_name = "Storage Blob Data Contributor"
  principal_id         = azurerm_user_assigned_identity.umi_aml_workspace[0].principal_id
}

## Create Azure RBAC role assignment on AML storage account for the AML workspace user-assigned managed identity
## to assign the Storage File Data Contributor. This enables the AML identity to read and write file data to the storage account
resource "azurerm_role_assignment" "umi_aml_st_file_data_contributor" {
  count = var.workspace_identity == "user_assigned" ? 1 : 0

  depends_on = [
    azurerm_role_assignment.umi_aml_st_blob_data_contributor
  ]

  name                 = uuidv5("dns", "${azurerm_resource_group.rg_aml_workspace.name}${azurerm_storage_account.storage_account_aml_workspace.name}${azurerm_user_assigned_identity.umi_aml_workspace[0].name}filedata")
  scope                = azurerm_storage_account.storage_account_aml_workspace.id
  role_definition_name = "Storage File Data Privileged Contributor"
  principal_id         = azurerm_user_assigned_identity.umi_aml_workspace[0].principal_id
}

## Pause for 120 seconds to allow the role assignments to propagate through Azure
##
resource "time_sleep" "wait_umi_hub_workspace_assignments_main" {
  count = var.workspace_identity == "umi" ? 1 : 0

  depends_on = [
    azurerm_role_assignment.umi_aml_rg_aiadministrator,
    azurerm_role_assignment.umi_aml_st_file_data_contributor,
    azurerm_role_assignment.umi_aml_kv_admin,
    azurerm_role_assignment.umi_aml_st_blob_data_contributor,
    azurerm_role_assignment.umi_aml_st_file_data_contributor
  ]
  create_duration = "120s"
}

########## Create the AML Workspace and its diagnostic settings
##########
##########

## Create the AML Workspace
##
resource "azurerm_machine_learning_workspace" "aml_workspace" {
  depends_on = [
    azurerm_application_insights.appins_aml_workspace,
    azurerm_log_analytics_workspace.log_analytics_workspace_workload,
    azurerm_container_registry.acr_aml_workspace,
    azurerm_storage_account.storage_account_aml_workspace,
    azurerm_key_vault.key_vault_aml_workspace,
    time_sleep.wait_umi_hub_workspace_assignments_main,
    azurerm_storage_account.storage_account_data
  ]

  name                = "amlws${var.region_code}${var.random_string}"
  resource_group_name = azurerm_resource_group.rg_aml_workspace.name
  location            = var.region
  tags                = var.tags

  # Hook into pre-configured AML supporting resources
  application_insights_id = azurerm_application_insights.appins_aml_workspace.id
  key_vault_id            = azurerm_key_vault.key_vault_aml_workspace.id
  storage_account_id      = azurerm_storage_account.storage_account_aml_workspace.id
  container_registry_id   = azurerm_container_registry.acr_aml_workspace.id

  friendly_name = "Sample-AML-Workspace"
  description   = "This is a sample AML Workspace that uses VNet injection"

  # Enable HBI since there are very few considerations of doing this
  high_business_impact = true

  # Configure network settings
  public_network_access_enabled = false

  # Set the workspace to use a user-assigned managed identity if specified, otherwise use a system-assigned managed identity
  identity {
    type = var.workspace_identity == "umi" ? "UserAssigned" : "SystemAssigned"
  }

  # If a user-assigned managed identity is being used, set the user-assigned managed identity ID
  primary_user_assigned_identity = var.workspace_identity == "umi" ? azurerm_user_assigned_identity.umi_aml_workspace[0].id : null
}

## Create diagnostic settings to capture resource logs and metrics for AML Workspace and place them in the Log Analytics Workspace
##
resource "azurerm_monitor_diagnostic_setting" "diag_aml_workspace" {
  depends_on = [
    azurerm_machine_learning_workspace.aml_workspace,
    azurerm_log_analytics_workspace.log_analytics_workspace_workload
  ]

  name                       = "diag-base"
  target_resource_id         = azurerm_machine_learning_workspace.aml_workspace.id
  log_analytics_workspace_id = azurerm_log_analytics_workspace.log_analytics_workspace_workload.id

  enabled_log {
    category = "AmlComputeClusterEvent"
  }
  enabled_log {
    category = "AmlComputeClusterNodeEvent"
  }
  enabled_log {
    category = "AmlComputeJobEvent"
  }
  enabled_log {
    category = "AmlComputeCpuGpuUtilization"
  }
  enabled_log {
    category = "AmlRunStatusChangedEvent"
  }
  enabled_log {
    category = "ModelsChangeEvent"
  }
  enabled_log {
    category = "ModelsReadEvent"
  }
  enabled_log {
    category = "ModelsActionEvent"
  }
  enabled_log {
    category = "DeploymentReadEvent"
  }
  enabled_log {
    category = "DeploymentEventACI"
  }
  enabled_log {
    category = "DeploymentEventAKS"
  }
  enabled_log {
    category = "InferencingOperationAKS"
  }
  enabled_log {
    category = "InferencingOperationACI"
  }
  enabled_log {
    category = "EnvironmentChangeEvent"
  }
  enabled_log {
    category = "EnvironmentReadEvent"
  }
  enabled_log {
    category = "DataLabelChangeEvent"
  }
  enabled_log {
    category = "DataLabelReadEvent"
  }
  enabled_log {
    category = "ComputeInstanceEvent"
  }
  enabled_log {
    category = "DataStoreChangeEvent"
  }
  enabled_log {
    category = "DataStoreReadEvent"
  }
  enabled_log {
    category = "DataSetChangeEvent"
  }
  enabled_log {
    category = "DataSetReadEvent"
  }
  enabled_log {
    category = "PipelineChangeEvent"
  }
  enabled_log {
    category = "PipelineReadEvent"
  }
  enabled_log {
    category = "RunEvent"
  }
  enabled_log {
    category = "RunReadEvent"
  }
}

########## Create Private Endpoints for AML Workspace and required resources
##########
##########

## Create a Private Endpoint AML Workspace instance
##
resource "azurerm_private_endpoint" "pe_aml_workspace" {
  depends_on = [
    azurerm_machine_learning_workspace.aml_workspace
  ]

  name                = "pe${azurerm_machine_learning_workspace.aml_workspace.name}workspace"
  location            = var.region
  resource_group_name = azurerm_resource_group.rg_aml_workspace.name
  tags                = var.tags
  subnet_id           = var.subnet_id_private_endpoints

  custom_network_interface_name = "nic${azurerm_machine_learning_workspace.aml_workspace.name}workspace"

  private_service_connection {
    name                           = "peconn${azurerm_machine_learning_workspace.aml_workspace.name}workspace"
    private_connection_resource_id = azurerm_machine_learning_workspace.aml_workspace.id
    subresource_names              = ["amlworkspace"]
    is_manual_connection           = false
  }

  private_dns_zone_group {
    name = "zoneconn${azurerm_machine_learning_workspace.aml_workspace.name}workspace"
    private_dns_zone_ids = [
      "/subscriptions/${data.azurerm_subscription.current.subscription_id}/resourceGroups/${var.resource_group_name_dns}/providers/Microsoft.Network/privateDnsZones/privatelink.api.azureml.ms",
      "/subscriptions/${data.azurerm_subscription.current.subscription_id}/resourceGroups/${var.resource_group_name_dns}/providers/Microsoft.Network/privateDnsZones/privatelink.notebooks.azure.net"
    ]
  }

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

## Create a Private Endpoint for AML Workspace storage account blob endpoint
##
resource "azurerm_private_endpoint" "pe_storage_account_aml_workspace_blob" {
  depends_on = [
    azurerm_storage_account.storage_account_aml_workspace
  ]

  name                = "pe${azurerm_storage_account.storage_account_aml_workspace.name}blob"
  location            = var.region
  resource_group_name = azurerm_resource_group.rg_aml_workspace.name
  tags                = var.tags
  subnet_id           = var.subnet_id_private_endpoints

  custom_network_interface_name = "nic${azurerm_storage_account.storage_account_aml_workspace.name}blob"

  private_service_connection {
    name                           = "peconn${azurerm_storage_account.storage_account_aml_workspace.name}blob"
    private_connection_resource_id = azurerm_storage_account.storage_account_aml_workspace.id
    subresource_names              = ["blob"]
    is_manual_connection           = false
  }

  private_dns_zone_group {
    name = "zoneconn${azurerm_storage_account.storage_account_aml_workspace.name}blob"
    private_dns_zone_ids = [
      "/subscriptions/${data.azurerm_subscription.current.subscription_id}/resourceGroups/${var.resource_group_name_dns}/providers/Microsoft.Network/privateDnsZones/privatelink.blob.core.windows.net"
    ]
  }

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

## Create a Private Endpoint for AML Workspace storage account file endpoint
##
resource "azurerm_private_endpoint" "pe_storage_account_aml_workspace_file" {
  depends_on = [
    azurerm_storage_account.storage_account_aml_workspace,
    azurerm_private_endpoint.pe_storage_account_aml_workspace_blob
  ]

  name                = "pe${azurerm_storage_account.storage_account_aml_workspace.name}file"
  location            = var.region
  resource_group_name = azurerm_resource_group.rg_aml_workspace.name
  tags                = var.tags
  subnet_id           = var.subnet_id_private_endpoints

  custom_network_interface_name = "nic${azurerm_storage_account.storage_account_aml_workspace.name}file"

  private_service_connection {
    name                           = "peconn${azurerm_storage_account.storage_account_aml_workspace.name}file"
    private_connection_resource_id = azurerm_storage_account.storage_account_aml_workspace.id
    subresource_names              = ["file"]
    is_manual_connection           = false
  }

  private_dns_zone_group {
    name = "zoneconn${azurerm_storage_account.storage_account_aml_workspace.name}file"
    private_dns_zone_ids = [
      "/subscriptions/${data.azurerm_subscription.current.subscription_id}/resourceGroups/${var.resource_group_name_dns}/providers/Microsoft.Network/privateDnsZones/privatelink.file.core.windows.net"
    ]
  }

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

## Create a Private Endpoint for AML Workspace Key Vault
##
resource "azurerm_private_endpoint" "pe_key_vault_aml_workspace" {
  depends_on = [
    azurerm_key_vault.key_vault_aml_workspace,
    azurerm_private_endpoint.pe_storage_account_aml_workspace_file
  ]

  name                = "pe${azurerm_key_vault.key_vault_aml_workspace.name}vault"
  location            = var.region
  resource_group_name = azurerm_resource_group.rg_aml_workspace.name
  tags                = var.tags
  subnet_id           = var.subnet_id_private_endpoints

  custom_network_interface_name = "nic${azurerm_key_vault.key_vault_aml_workspace.name}vault"

  private_service_connection {
    name                           = "peconn${azurerm_key_vault.key_vault_aml_workspace.name}vault"
    private_connection_resource_id = azurerm_key_vault.key_vault_aml_workspace.id
    subresource_names              = ["vault"]
    is_manual_connection           = false
  }

  private_dns_zone_group {
    name = "zoneconn${azurerm_key_vault.key_vault_aml_workspace.name}vault"
    private_dns_zone_ids = [
      "/subscriptions/${data.azurerm_subscription.current.subscription_id}/resourceGroups/${var.resource_group_name_dns}/providers/Microsoft.Network/privateDnsZones/privatelink.vaultcore.azure.net"
    ]
  }

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

## Create a Private Endpoint for AML Workspace Container Registry
##
resource "azurerm_private_endpoint" "pe_container_registry_aml_workspace" {
  depends_on = [
    azurerm_container_registry.acr_aml_workspace,
    azurerm_private_endpoint.pe_key_vault_aml_workspace
  ]

  name                = "pe${azurerm_container_registry.acr_aml_workspace.name}registry"
  location            = var.region
  resource_group_name = azurerm_resource_group.rg_aml_workspace.name
  tags                = var.tags
  subnet_id           = var.subnet_id_private_endpoints

  custom_network_interface_name = "nic${azurerm_container_registry.acr_aml_workspace.name}registry"

  private_service_connection {
    name                           = "peconn${azurerm_container_registry.acr_aml_workspace.name}registry"
    private_connection_resource_id = azurerm_container_registry.acr_aml_workspace.id
    subresource_names              = ["registry"]
    is_manual_connection           = false
  }

  private_dns_zone_group {
    name = "zoneconn${azurerm_container_registry.acr_aml_workspace.name}registry"
    private_dns_zone_ids = [
      "/subscriptions/${data.azurerm_subscription.current.subscription_id}/resourceGroups/${var.resource_group_name_dns}/providers/Microsoft.Network/privateDnsZones/privatelink.azurecr.io"
    ]
  }

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

########## Create Private Endpoints for optional resources
##########
##########

## Create a Private Endpoint for data storage account blob endpoint
##
resource "azurerm_private_endpoint" "pe_storage_account_data_blob" {
  depends_on = [
    azurerm_storage_account.storage_account_data,
    azurerm_private_endpoint.pe_container_registry_aml_workspace
  ]

  name                = "pe${azurerm_storage_account.storage_account_data.name}blob"
  location            = var.region
  resource_group_name = azurerm_resource_group.rg_aml_workspace.name
  tags                = var.tags
  subnet_id           = var.subnet_id_private_endpoints

  custom_network_interface_name = "nic${azurerm_storage_account.storage_account_data.name}blob"

  private_service_connection {
    name                           = "peconn${azurerm_storage_account.storage_account_data.name}blob"
    private_connection_resource_id = azurerm_storage_account.storage_account_data.id
    subresource_names              = ["blob"]
    is_manual_connection           = false
  }

  private_dns_zone_group {
    name = "zoneconn${azurerm_storage_account.storage_account_data.name}blob"
    private_dns_zone_ids = [
      "/subscriptions/${data.azurerm_subscription.current.subscription_id}/resourceGroups/${var.resource_group_name_dns}/providers/Microsoft.Network/privateDnsZones/privatelink.blob.core.windows.net"
    ]
  }

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

## Create a Private Endpoint for data storage account file endpoint
##
resource "azurerm_private_endpoint" "pe_storage_account_data_file" {
  depends_on = [
    azurerm_storage_account.storage_account_data,
    azurerm_private_endpoint.pe_storage_account_data_blob
  ]

  name                = "pe${azurerm_storage_account.storage_account_data.name}file"
  location            = var.region
  resource_group_name = azurerm_resource_group.rg_aml_workspace.name
  tags                = var.tags
  subnet_id           = var.subnet_id_private_endpoints

  custom_network_interface_name = "nic${azurerm_storage_account.storage_account_data.name}file"

  private_service_connection {
    name                           = "peconn${azurerm_storage_account.storage_account_data.name}file"
    private_connection_resource_id = azurerm_storage_account.storage_account_data.id
    subresource_names              = ["file"]
    is_manual_connection           = false
  }

  private_dns_zone_group {
    name = "zoneconn${azurerm_storage_account.storage_account_data.name}file"
    private_dns_zone_ids = [
      "/subscriptions/${data.azurerm_subscription.current.subscription_id}/resourceGroups/${var.resource_group_name_dns}/providers/Microsoft.Network/privateDnsZones/privatelink.file.core.windows.net"
    ]
  }

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

## Create a Private Endpoint for data storage account table endpoint
##
resource "azurerm_private_endpoint" "pe_storage_account_data_table" {
  depends_on = [
    azurerm_storage_account.storage_account_data,
    azurerm_private_endpoint.pe_storage_account_data_file
  ]

  name                = "pe${azurerm_storage_account.storage_account_data.name}table"
  location            = var.region
  resource_group_name = azurerm_resource_group.rg_aml_workspace.name
  tags                = var.tags
  subnet_id           = var.subnet_id_private_endpoints

  custom_network_interface_name = "nic${azurerm_storage_account.storage_account_data.name}table"

  private_service_connection {
    name                           = "peconn${azurerm_storage_account.storage_account_data.name}table"
    private_connection_resource_id = azurerm_storage_account.storage_account_data.id
    subresource_names              = ["table"]
    is_manual_connection           = false
  }

  private_dns_zone_group {
    name = "zoneconn${azurerm_storage_account.storage_account_data.name}table"
    private_dns_zone_ids = [
      "/subscriptions/${data.azurerm_subscription.current.subscription_id}/resourceGroups/${var.resource_group_name_dns}/providers/Microsoft.Network/privateDnsZones/privatelink.table.core.windows.net"
    ]
  }

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

## Create a Private Endpoint for data storage account dfs endpoint
##
resource "azurerm_private_endpoint" "pe_storage_account_data_dfs" {
  depends_on = [
    azurerm_storage_account.storage_account_data,
    azurerm_private_endpoint.pe_storage_account_data_table
  ]

  name                = "pe${azurerm_storage_account.storage_account_data.name}dfs"
  location            = var.region
  resource_group_name = azurerm_resource_group.rg_aml_workspace.name
  tags                = var.tags
  subnet_id           = var.subnet_id_private_endpoints

  custom_network_interface_name = "nic${azurerm_storage_account.storage_account_data.name}dfs"

  private_service_connection {
    name                           = "peconn${azurerm_storage_account.storage_account_data.name}dfs"
    private_connection_resource_id = azurerm_storage_account.storage_account_data.id
    subresource_names              = ["dfs"]
    is_manual_connection           = false
  }

  private_dns_zone_group {
    name = "zoneconn${azurerm_storage_account.storage_account_data.name}dfs"
    private_dns_zone_ids = [
      "/subscriptions/${data.azurerm_subscription.current.subscription_id}/resourceGroups/${var.resource_group_name_dns}/providers/Microsoft.Network/privateDnsZones/privatelink.dfs.core.windows.net"
    ]
  }

  lifecycle {
    ignore_changes = [
      tags["created_date"],
      tags["created_by"]
    ]
  }
}

########## Create connections to data storage account from AML Workspace
##########
##########
resource "azurerm_machine_learning_datastore_blobstorage" "aml_workspace_datastore_data_blob" {
  depends_on = [
    azurerm_machine_learning_workspace.aml_workspace,
    azurerm_storage_account.storage_account_data,
    azurerm_private_endpoint.pe_storage_account_data_blob
  ]

  name                          = "datastoreblobdata"
  description = "Datastore for extra data"
  workspace_id = azurerm_machine_learning_workspace.aml_workspace.id
  storage_container_id = azurerm_storage_container.blob_data.id
  service_data_auth_identity = "WorkspaceUserAssignedIdentity"
}

########## Create DNS record required for split-brain DNS of instances.azureml.ms which is required zone
########## to support access to compute instances from Visual Studio Code
##########

## Create auth A record in the instances.azureml.ms private DNS zone for the AML Hub workspace
##
resource "azurerm_private_dns_a_record" "aml_compute_instance_dns_record_auth" {
  depends_on = [
    azurerm_private_endpoint.pe_aml_workspace
  ]

  name                = "auth.${var.region}"
  zone_name           = "instances.azureml.ms"
  resource_group_name = var.resource_group_name_dns
  ttl                 = 10
  records = [
    azurerm_private_endpoint.pe_aml_workspace.private_service_connection.0.private_ip_address
  ]
}

########## Create the AML Compute Cluster which will be used the dedicated cluster for image builds
########## and the AML Compute Instance for development
##########

## Create the AML Compute Cluster which will be used for image builds
##
module "aml_compute_cluster_image_build" {
  depends_on = [
    azurerm_machine_learning_workspace.aml_workspace,
    azurerm_private_endpoint.pe_aml_workspace,
    azurerm_private_endpoint.pe_container_registry_aml_workspace,
    azurerm_private_endpoint.pe_key_vault_aml_workspace,
    azurerm_private_endpoint.pe_storage_account_aml_workspace_blob,
    azurerm_private_endpoint.pe_storage_account_aml_workspace_file,
    azurerm_private_endpoint.pe_storage_account_data_blob,
    azurerm_private_endpoint.pe_storage_account_data_file,
    azurerm_private_endpoint.pe_storage_account_data_table,
    azurerm_private_endpoint.pe_storage_account_data_dfs
  ]

  source = "./modules/compute-cluster"

  region        = var.region
  region_code   = var.region_code
  random_string = var.random_string
  tags          = var.tags

  resource_group_id_workload   = azurerm_resource_group.rg_aml_workspace.id
  resource_group_name_workload = azurerm_resource_group.rg_aml_workspace.name
  resource_group_name_dns      = var.resource_group_name_dns

  aml_workspace_resource_id       = azurerm_machine_learning_workspace.aml_workspace.id
  law_resource_id                 = azurerm_log_analytics_workspace.log_analytics_workspace_workload.id
  workspace_container_registry_id = azurerm_container_registry.acr_aml_workspace.id
  workspace_storage_account_id    = azurerm_storage_account.storage_account_aml_workspace.id

  subnet_id_amlcompute        = var.subnet_id_amlcompute
  pe_ip_address_aml_workspace = azurerm_private_endpoint.pe_aml_workspace.private_service_connection.0.private_ip_address

  user_object_id = var.user_object_id

  vm_size = var.vm_size

}

## Patch the AML Workspace to set the image build compute to the AML Compute Cluster created in the module above
##
resource "azapi_update_resource" "aml_workspace_patch_image_build_compute" {
  depends_on = [
    module.aml_compute_cluster_image_build
  ]

  type       = "Microsoft.MachineLearningServices/workspaces@2025-09-01"
  resource_id = azurerm_machine_learning_workspace.aml_workspace.id
  body = {
    properties = {
      imageBuildCompute = module.aml_compute_cluster_image_build.compute_cluster_build_name
    }
  }
}

## Create the AML Compute Instance for development
##
module "aml_compute_instance_dev" {
  source = "./modules/compute-instance"
  depends_on = [
    azurerm_private_endpoint.pe_aml_workspace,
    module.aml_compute_cluster_image_build,
    azapi_update_resource.aml_workspace_patch_image_build_compute
  ]
  region        = var.region
  region_code   = var.region_code
  random_string = var.random_string
  tags          = var.tags

  resource_group_id_workload      = azurerm_resource_group.rg_aml_workspace.id
  resource_group_name_workload    = azurerm_resource_group.rg_aml_workspace.name
  resource_group_name_dns         = var.resource_group_name_dns
  aml_workspace_resource_id       = azurerm_machine_learning_workspace.aml_workspace.id
  law_resource_id                 = azurerm_log_analytics_workspace.log_analytics_workspace_workload.id
  workspace_container_registry_id = azurerm_container_registry.acr_aml_workspace.id
  workspace_storage_account_id    = azurerm_storage_account.storage_account_aml_workspace.id

  subnet_id_amlcompute        = var.subnet_id_amlcompute
  pe_ip_address_aml_workspace = azurerm_private_endpoint.pe_aml_workspace.private_service_connection.0.private_ip_address

  user_object_id = var.user_object_id

  vm_size = var.vm_size
}

########## Create the human role assignments
##########
##########

## Create Azure RBAC Role Assignment granting the Azure Machine Learning Data Scientist role to the user.
## This allows the user to perform all actions except for creating compute resources.
##
resource "azurerm_role_assignment" "wk_perm_data_scientist_project" {
  depends_on = [
    module.aml_compute_instance_dev
  ]
  name                 = uuidv5("dns", "${azurerm_resource_group.rg_aml_workspace.name}${var.user_object_id}${azurerm_machine_learning_workspace.aml_workspace.name}datascientist")
  scope                = azurerm_machine_learning_workspace.aml_workspace.id
  role_definition_name = "AzureML Data Scientist"
  principal_id         = var.user_object_id
}

## Create Azure RBAC Role assignment granting the Storage File Data Privileged Contributor role on the
## AML Hub storage account to the user within the scope of the file share used by the AML Project
##
resource "azurerm_role_assignment" "wk_pr_perm_st_file_data_privileged_contributor" {
  depends_on = [
    module.aml_compute_instance_dev
  ]
  name                 = uuidv5("dns", "${azurerm_storage_account.storage_account_aml_workspace.name}${var.user_object_id}storagefiledataprivilegedcontributor")
  scope                = azurerm_storage_account.storage_account_aml_workspace.id
  role_definition_name = "Storage File Data Privileged Contributor"
  principal_id         = var.user_object_id
}

## Create Azure RBAC Role assignment granting the Storage Blob Data Contributor role on the
## AML Hub storage account to the user within the scope of the containers used by the AML Project
##
resource "azurerm_role_assignment" "wk_pr_perm_st_blob_data_contributor" {
  depends_on = [
    module.aml_compute_instance_dev
  ]
  name                 = uuidv5("dns", "${azurerm_storage_account.storage_account_aml_workspace.name}${var.user_object_id}storageblobdatacontributor")
  scope                = azurerm_storage_account.storage_account_aml_workspace.id
  role_definition_name = "Storage Blob Data Contributor"
  principal_id         = var.user_object_id
}